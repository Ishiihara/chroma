// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	dbmodel "github.com/chroma/chroma-coordinator/internal/metastore/db/dbmodel"
	mock "github.com/stretchr/testify/mock"

	types "github.com/chroma/chroma-coordinator/internal/types"
)

// ICollectionDb is an autogenerated mock type for the ICollectionDb type
type ICollectionDb struct {
	mock.Mock
}

// Get provides a mock function with given fields: collectionID, ts
func (_m *ICollectionDb) Get(collectionID types.UniqueID, ts uint64) (*dbmodel.Collection, error) {
	ret := _m.Called(collectionID, ts)

	var r0 *dbmodel.Collection
	var r1 error
	if rf, ok := ret.Get(0).(func(types.UniqueID, uint64) (*dbmodel.Collection, error)); ok {
		return rf(collectionID, ts)
	}
	if rf, ok := ret.Get(0).(func(types.UniqueID, uint64) *dbmodel.Collection); ok {
		r0 = rf(collectionID, ts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dbmodel.Collection)
		}
	}

	if rf, ok := ret.Get(1).(func(types.UniqueID, uint64) error); ok {
		r1 = rf(collectionID, ts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCollectionIDByName provides a mock function with given fields: collectionName, ts
func (_m *ICollectionDb) GetCollectionIDByName(collectionName string, ts uint64) (types.UniqueID, error) {
	ret := _m.Called(collectionName, ts)

	var r0 types.UniqueID
	var r1 error
	if rf, ok := ret.Get(0).(func(string, uint64) (types.UniqueID, error)); ok {
		return rf(collectionName, ts)
	}
	if rf, ok := ret.Get(0).(func(string, uint64) types.UniqueID); ok {
		r0 = rf(collectionName, ts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.UniqueID)
		}
	}

	if rf, ok := ret.Get(1).(func(string, uint64) error); ok {
		r1 = rf(collectionName, ts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCollectionIDTs provides a mock function with given fields: collectionID, ts
func (_m *ICollectionDb) GetCollectionIDTs(collectionID types.UniqueID, ts uint64) (*dbmodel.Collection, error) {
	ret := _m.Called(collectionID, ts)

	var r0 *dbmodel.Collection
	var r1 error
	if rf, ok := ret.Get(0).(func(types.UniqueID, uint64) (*dbmodel.Collection, error)); ok {
		return rf(collectionID, ts)
	}
	if rf, ok := ret.Get(0).(func(types.UniqueID, uint64) *dbmodel.Collection); ok {
		r0 = rf(collectionID, ts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dbmodel.Collection)
		}
	}

	if rf, ok := ret.Get(1).(func(types.UniqueID, uint64) error); ok {
		r1 = rf(collectionID, ts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: in
func (_m *ICollectionDb) Insert(in *dbmodel.Collection) error {
	ret := _m.Called(in)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dbmodel.Collection) error); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListCollectionIDTs provides a mock function with given fields: ts
func (_m *ICollectionDb) ListCollectionIDTs(ts uint64) ([]*dbmodel.Collection, error) {
	ret := _m.Called(ts)

	var r0 []*dbmodel.Collection
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) ([]*dbmodel.Collection, error)); ok {
		return rf(ts)
	}
	if rf, ok := ret.Get(0).(func(uint64) []*dbmodel.Collection); ok {
		r0 = rf(ts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dbmodel.Collection)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(ts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: in
func (_m *ICollectionDb) Update(in *dbmodel.Collection) error {
	ret := _m.Called(in)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dbmodel.Collection) error); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewICollectionDb creates a new instance of ICollectionDb. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICollectionDb(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICollectionDb {
	mock := &ICollectionDb{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
